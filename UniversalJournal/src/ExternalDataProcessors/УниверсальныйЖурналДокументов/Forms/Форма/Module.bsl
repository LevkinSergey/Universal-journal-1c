 
#Область ОбщиеФункцииПрограмногоИнтерфейса

// Создать обычную группу на форме.
// 
// Parameters:
//  Форма - ClientApplicationForm - Форма
//  ИмяЭлемента - String - Имя элемента
//  Родитель - Undefined, FormDecoration, FormGroup, FormButton, FormTable, FormField - Родитель
//  ИмяЭлементаПередКоторымВставлятьНовыйЭлемент - Undefined - Имя элемента перед которым вставлять новый элемент
//  ВидГруппировки - Undefined - Вид группировки
//  Отображение - Undefined - Отображение
//  Заголовок - String - Заголовок
//  ВидГруппы - Undefined - Вид группы
//  ПоведениеОбычнойГруппы - Undefined - Поведение обычной группы
//  ВысотаЭлемента - Undefined - Высота элемента
&НаСервере
Процедура СоздатьОбычнуюГруппуНаФорме(
	Форма, 
	ИмяЭлемента, 
	Родитель = Неопределено, 
	ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено,
	ВидГруппировки = Неопределено,
	Отображение = Неопределено,
	Заголовок = "",
	ВидГруппы = Неопределено,
	ПоведениеОбычнойГруппы = Неопределено,
	ВысотаЭлемента = Неопределено) Экспорт
	
	Если НЕ Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		// элемент уже добавлен - можно проверять когда из формы вызывается пометка на удаление, то форма обновляется
		возврат;	
	КонецЕсли; 
	
	ЭлементПередКоторымВставлятьНовыйЭлемент = Форма.Элементы.Найти(ИмяЭлементаПередКоторымВставлятьНовыйЭлемент);
	Если 
		НЕ ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено
		И ЭлементПередКоторымВставлятьНовыйЭлемент = Неопределено 
		Тогда
		Сообщить("Не найден элемент "+ИмяЭлементаПередКоторымВставлятьНовыйЭлемент+" перед которым нужно вставлять элемент "+ИмяЭлемента);
		возврат;	
	КонецЕсли; 
	
	
	Элемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), Родитель, ЭлементПередКоторымВставлятьНовыйЭлемент);
	
	Если ВидГруппы = Неопределено Тогда
		Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Иначе
		Элемент.Вид = ВидГруппы;
	КонецЕсли;
	Элемент.Видимость = Истина;
	Элемент.Доступность = Истина;
	Если ВидГруппы = Неопределено Тогда 
		Если Отображение = Неопределено Тогда
			Элемент.Отображение = ОтображениеОбычнойГруппы.Нет;
		Иначе
			Элемент.Отображение = Отображение;
		КонецЕсли;
		Если ВидГруппировки = Неопределено Тогда
			Элемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Иначе
			Элемент.Группировка = ВидГруппировки;
		КонецЕсли;
		Если НЕ Элемент.Отображение = ОтображениеОбычнойГруппы.Нет Тогда
			Элемент.Заголовок = Заголовок;
		Иначе
			Элемент.ОтображатьЗаголовок = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоведениеОбычнойГруппы <> Неопределено Тогда
		Элемент.Поведение = ПоведениеОбычнойГруппы;
		Элемент.ЗаголовокСвернутогоОтображения = ИмяЭлемента;
	КонецЕсли;
	
	Если ВысотаЭлемента <> Неопределено Тогда
		Элемент.Высота = ВысотаЭлемента;
		Элемент.РастягиватьПоВертикали = Ложь; 
	КонецЕсли;
	
КонецПроцедуры


// Создать таблицу на форме.
// 
// Parameters:
//  Форма - ClientApplicationForm - Форма
//  ИмяЭлемента - String, Arbitrary - Имя элемента
//  ПутьКДанным - String, Arbitrary - Путь к данным
//  Родитель - Undefined, FormDecoration, FormGroup, FormButton, FormTable, FormField - Родитель
//  ЭтоТабличнаяЧасть - Boolean - Это табличная часть
//  ТолькоПросмотр - Boolean - Только просмотр
//  ИмяЭлементаПередКоторымВставлятьНовыйЭлемент - Undefined, String - Имя элемента перед которым вставлять новый элемент
//  Ширина - Undefined - Ширина
//  ПоложениеЗаголовка - Undefined - Положение заголовка
//  Высота - Undefined - Высота
//  ЭтоРеквизитФормы - Boolean - Это реквизит формы
&НаСервере
Процедура СоздатьТаблицуНаФорме(
	Форма, 
	ИмяЭлемента, 
	ЗНАЧ ПутьКДанным, // в случае добавления элементов отражающих реквизиты ссылочных элементов
	Родитель=Неопределено, 
	ЭтоТабличнаяЧасть = Истина, 
	ТолькоПросмотр = Ложь,
	ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено,
	Ширина = Неопределено,
	ПоложениеЗаголовка = Неопределено,
	Высота = Неопределено,
	ЭтоРеквизитФормы = Ложь) Экспорт
	
	Если НЕ Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		// элемент уже добавлен - можно проверять когда из формы вызывается пометка на удаление, то форма обновляется
		Возврат;	
	КонецЕсли; 
	
	ЭлементПередКоторымВставлятьНовыйЭлемент = Форма.Элементы.Найти(ИмяЭлементаПередКоторымВставлятьНовыйЭлемент);
	Если 
		НЕ ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено
		И ЭлементПередКоторымВставлятьНовыйЭлемент = Неопределено 
		Тогда
		Сообщить("Не найден элемент "+ИмяЭлементаПередКоторымВставлятьНовыйЭлемент+" перед которым нужно вставлять элемент "+ИмяЭлемента);
		возврат;	
	КонецЕсли; 
	
	Если ЭтоТабличнаяЧасть Тогда
		// для ДанныеФормыКоллекция наличие реквизита не проверить
		Если Не ЭтоРеквизитФормы Тогда
			ПутьКДанным = "Объект."+ПутьКДанным;
		КонецЕсли
	Иначе
		ПутьКДанным = "Объект."+ИмяЭлемента;
		
		Если Форма.Объект.Свойство(ИмяЭлемента) Тогда
			//
		Иначе	
			Сообщить("Ошибка при добавлении элемента на форму по приичне: у объекта не найден реквизит "+ПутьКДанным);
			возврат;	
		КонецЕсли; 
	КонецЕсли;
	
	Элемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ТаблицаФормы"), Родитель, ЭлементПередКоторымВставлятьНовыйЭлемент);
	Элемент.ПутьКДанным = ПутьКДанным;
	Если ПоложениеЗаголовка = Неопределено Тогда
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовка;
	КонецЕсли;
	Элемент.Видимость = Истина;
	Элемент.Доступность = Истина;
	Элемент.ТолькоПросмотр = ТолькоПросмотр;	
	Если Ширина = Неопределено Тогда
		//
	Иначе
		Элемент.Ширина = Ширина;
	КонецЕсли;
	
	Если Высота = Неопределено Тогда
		//
	Иначе
		Элемент.Высота = Высота;
	КонецЕсли;
	
КонецПроцедуры


// Создать колонку динамического списка на форме.
// 
// Parameters:
//  Форма - ClientApplicationForm - Форма
//  ИмяЭлемента - Arbitrary - Имя элемента
//  ПутьКДанным - Undefined, String - Путь к данным
//  Родитель - Undefined, FormGroup, FormTable, FormField, FormButton, FormDecoration - Родитель
//  ИмяЭлементаПередКоторымВставлятьНовыйЭлемент - Undefined - Имя элемента перед которым вставлять новый элемент
//  Ширина - Undefined - Ширина
//  РастягиватьПоГоризонтали - Undefined - Растягивать по горизонтали
//  Заголовок - String - Заголовок
&НаСервере
Процедура СоздатьКолонкуДинамическогоСпискаНаФорме(
	Форма, 
	ИмяЭлемента, 
	ПутьКДанным=Неопределено, // в случае добавления элементов отражающих реквизиты ссылочных элементов
	Родитель=Неопределено, 
	ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено,
	Ширина = Неопределено,
	РастягиватьПоГоризонтали = Неопределено,
	Заголовок="") Экспорт
	
	Если НЕ Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		// элемент уже добавлен - можно проверять когда из формы вызывается пометка на удаление, то форма обновляется
		возврат;	
	КонецЕсли; 
	
	ЭлементПередКоторымВставлятьНовыйЭлемент = Форма.Элементы.Найти(ИмяЭлементаПередКоторымВставлятьНовыйЭлемент);
	Если 
		НЕ ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено
		И ЭлементПередКоторымВставлятьНовыйЭлемент = Неопределено 
		Тогда
		Сообщить("Не найден элемент "+ИмяЭлементаПередКоторымВставлятьНовыйЭлемент+" перед которым нужно вставлять элемент "+ИмяЭлемента);
		возврат;	
	КонецЕсли; 
		
	Элемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, ЭлементПередКоторымВставлятьНовыйЭлемент);
	
	Элемент.ПутьКДанным = ПутьКДанным;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	Если РастягиватьПоГоризонтали = Неопределено Тогда
		//
	Иначе
		Элемент.РастягиватьПоГоризонтали = РастягиватьПоГоризонтали;
	КонецЕсли;	
	Если Ширина = Неопределено Тогда
		//
	иначе
		
		Элемент.Ширина = Ширина;
		
	КонецЕсли; 
	Если НЕ Заголовок = "" Тогда
		Элемент.Заголовок = Заголовок;
	КонецЕсли;
	
КонецПроцедуры


// Создать страницу на форме.
// 
// Parameters:
//  Форма - ClientApplicationForm - Форма
//  ИмяЭлемента - String - Имя элемента
//  Родитель - Undefined, FormGroup, FormTable, FormField, FormButton, FormDecoration - Родитель
//  ИмяЭлементаПередКоторымВставлятьНовыйЭлемент - Undefined - Имя элемента перед которым вставлять новый элемент
//  ВидГруппировки - Undefined - Вид группировки
//  Заголовок - String, Arbitrary - Заголовок
&НаСервере
Процедура СоздатьСтраницуНаФорме(
	Форма, 
	ИмяЭлемента, 
	Родитель = Неопределено, 
	ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено,
	ВидГруппировки = Неопределено,
	Заголовок = "") Экспорт
	
	Если НЕ Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		// элемент уже добавлен - можно проверять когда из формы вызывается пометка на удаление, то форма обновляется
		возврат;	
	КонецЕсли; 
	
	ЭлементПередКоторымВставлятьНовыйЭлемент = Форма.Элементы.Найти(ИмяЭлементаПередКоторымВставлятьНовыйЭлемент);
	Если 
		НЕ ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено
		И ЭлементПередКоторымВставлятьНовыйЭлемент = Неопределено 
		Тогда
		Сообщить("Не найден элемент "+ИмяЭлементаПередКоторымВставлятьНовыйЭлемент+" перед которым нужно вставлять элемент "+ИмяЭлемента);
		возврат;	
	КонецЕсли; 
	
	
	Элемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), Родитель, ЭлементПередКоторымВставлятьНовыйЭлемент);
	
	Элемент.Вид = ВидГруппыФормы.Страница;
	Элемент.Видимость = Истина;
	Элемент.Доступность = Истина;
	Элемент.ОтображатьЗаголовок = Истина;
	Элемент.Заголовок = Заголовок;
	Если ВидГруппировки = Неопределено Тогда
		Элемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Иначе
		Элемент.Группировка = ВидГруппировки;
	КонецЕсли;
	
КонецПроцедуры


// Создать группу страниц на форме.
// 
// Parameters:
//  Форма - ClientApplicationForm - Форма
//  ИмяЭлемента - String - Имя элемента
//  Родитель - Undefined, FormDecoration, FormGroup, FormButton, FormTable, FormField - Родитель
//  ИмяЭлементаПередКоторымВставлятьНовыйЭлемент - Undefined - Имя элемента перед которым вставлять новый элемент
//  ВидГруппировки - Undefined - Вид группировки
//  Заголовок - String - Заголовок
&НаСервере
Процедура СоздатьГруппуСтраницНаФорме(
	Форма, 
	ИмяЭлемента, 
	Родитель = Неопределено, 
	ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено,
	ВидГруппировки = Неопределено,
	Заголовок = "") Экспорт
	
	Если НЕ Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		// элемент уже добавлен - можно проверять когда из формы вызывается пометка на удаление, то форма обновляется
		возврат;	
	КонецЕсли; 
	
	ЭлементПередКоторымВставлятьНовыйЭлемент = Форма.Элементы.Найти(ИмяЭлементаПередКоторымВставлятьНовыйЭлемент);
	Если 
		НЕ ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено
		И ЭлементПередКоторымВставлятьНовыйЭлемент = Неопределено 
		Тогда
		Сообщить("Не найден элемент "+ИмяЭлементаПередКоторымВставлятьНовыйЭлемент+" перед которым нужно вставлять элемент "+ИмяЭлемента);
		возврат;	
	КонецЕсли; 
	
	
	Элемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), Родитель, ЭлементПередКоторымВставлятьНовыйЭлемент);
	
	Элемент.Вид = ВидГруппыФормы.Страницы;
	Элемент.Видимость = Истина;
	Элемент.Доступность = Истина;
	
КонецПроцедуры


// Создать обработчик поля формы.
// 
// Parameters:
//  Форма - ClientApplicationForm - Форма
//  ИмяПолеФормы - String - Имя поле формы
//  ИмяСобытия - String - Имя события
//  Действие - String - Действие
&НаСервере
Процедура СоздатьОбработчикПоляФормы(
	Форма, 
	ИмяПолеФормы,
	ИмяСобытия,
	Действие) Экспорт
	
	ПолеФормы = Форма.Элементы.Найти(ИмяПолеФормы);
	Если ПолеФормы = Неопределено Тогда
		Сообщить("Не найдено поле формы "+ИмяПолеФормы+" для которого нужно назначить обработчик события");
		Возврат;
	КонецЕсли;
	
	ПолеФормы.УстановитьДействие(ИмяСобытия, Действие); 
	
	
КонецПроцедуры


// Создать колонку динамического списка на форме картинка.
// 
// Parameters:
//  Форма - ClientApplicationForm - Форма
//  ИмяЭлемента - Arbitrary - Имя элемента
//  ПутьКДанным - Undefined, String - Путь к данным
//  Родитель - Undefined, FormGroup, FormTable, FormField, FormButton, FormDecoration - Родитель
//  ИмяЭлементаПередКоторымВставлятьНовыйЭлемент - Undefined - Имя элемента перед которым вставлять новый элемент
//  Ширина - Undefined - Ширина
//  РастягиватьПоГоризонтали - Undefined - Растягивать по горизонтали
//  Заголовок - String - Заголовок
//  Картинка Картинка
&НаСервере
Процедура СоздатьКолонкуДинамическогоСпискаНаФормеКартинка(
	Форма, 
	ИмяЭлемента, 
	ПутьКДанным=Неопределено, // в случае добавления элементов отражающих реквизиты ссылочных элементов
	Родитель=Неопределено, 
	ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено,
	Ширина = Неопределено,
	РастягиватьПоГоризонтали = Неопределено,
	Заголовок="",
	Картинка) Экспорт
	
	Если НЕ Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		// элемент уже добавлен - можно проверять когда из формы вызывается пометка на удаление, то форма обновляется
		возврат;	
	КонецЕсли; 
	
	ЭлементПередКоторымВставлятьНовыйЭлемент = Форма.Элементы.Найти(ИмяЭлементаПередКоторымВставлятьНовыйЭлемент);
	Если 
		НЕ ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено
		И ЭлементПередКоторымВставлятьНовыйЭлемент = Неопределено 
		Тогда
		Сообщить("Не найден элемент "+ИмяЭлементаПередКоторымВставлятьНовыйЭлемент+" перед которым нужно вставлять элемент "+ИмяЭлемента);
		возврат;	
	КонецЕсли; 
		
	Элемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, ЭлементПередКоторымВставлятьНовыйЭлемент);
	Элемент.Вид =  ВидПоляФормы.ПолеКартинки;	
	
	Элемент.ПутьКДанным = ПутьКДанным;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.КартинкаЗначений = Картинка;
	Если РастягиватьПоГоризонтали = Неопределено Тогда
		//
	Иначе
		Элемент.РастягиватьПоГоризонтали = РастягиватьПоГоризонтали;
	КонецЕсли;	
	Если Ширина = Неопределено Тогда
		//
	иначе
		
		Элемент.Ширина = Ширина;
		
	КонецЕсли; 
	Если НЕ Заголовок = "" Тогда
		Элемент.Заголовок = Заголовок;
	КонецЕсли;
	
КонецПроцедуры


// Создать команду на форме.
// 
// Parameters:
//  Форма - ClientApplicationForm - Форма
//  ИмяЭлемента - String - Имя элемента
//  ПутьКДанным - Undefined - Путь к данным
//  Родитель - Undefined, FormGroup, FormTable, FormField, FormButton, FormDecoration - Родитель
//  КнопкаВыбора - Boolean - Кнопка выбора
//  КнопкаОчистки - Boolean - Кнопка очистки
//  ЭтоТабличнаяЧасть - Boolean - Это табличная часть
//  ТолькоПросмотр - Boolean - Только просмотр
//  ИмяЭлементаПередКоторымВставлятьНовыйЭлемент - Undefined - Имя элемента перед которым вставлять новый элемент
//  Ширина - Undefined - Ширина
//  Заголовок - Undefined, String - Заголовок
//  Картинка - Undefined, Picture - Картинка
//  Отображение - Undefined - Отображение
//  ТолькоВоВсехДействиях - Boolean - Только во всех действиях
//  СочетаниеКлавишь - Undefined - Сочетание клавишь
//  Действие - Undefined, String - Действие
&НаСервере
Процедура СоздатьКомандуНаФорме(                     
	Форма, 
	ИмяЭлемента, 
	ПутьКДанным=Неопределено, // в случае добавления элементов отражающих реквизиты ссылочных элементов
	Родитель=Неопределено, 
	КнопкаВыбора = Истина, 
	КнопкаОчистки = Истина,
	ЭтоТабличнаяЧасть = Ложь, 
	ТолькоПросмотр = Ложь,
	ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено,
	Ширина = Неопределено,
	Заголовок = Неопределено,
	Картинка = Неопределено,
	Отображение = Неопределено,
	ТолькоВоВсехДействиях = Ложь,
	СочетаниеКлавишь = Неопределено,
	Действие = Неопределено) Экспорт
	
	ЭлементПередКоторымВставлятьНовыйЭлемент = Форма.Элементы.Найти(ИмяЭлементаПередКоторымВставлятьНовыйЭлемент);
	Попытка
		Команда = Форма.Команды.Добавить(ИмяЭлемента);	
	Исключение
		Команда = Форма.Команды.Найти(ИмяЭлемента);
	КонецПопытки;
		
	Если Действие <> Неопределено Тогда
		Команда.Действие = Действие;	
	Иначе
		Команда.Действие = ИмяЭлемента;	
	КонецЕсли;
	
	Элемент 			= Форма.Элементы.Вставить(ИмяЭлемента, Тип("КнопкаФормы"), Родитель, ЭлементПередКоторымВставлятьНовыйЭлемент);
	Элемент.ИмяКоманды 	= ИмяЭлемента;
	Если Картинка <> Неопределено Тогда
		Элемент.Картинка = Картинка;
	КонецЕсли;
	
	Если Отображение <> Неопределено Тогда
		Элемент.Отображение = Отображение;
	КонецЕсли;
	
	Если Заголовок <> Неопределено Тогда
		Элемент.Заголовок = Заголовок;
	КонецЕсли;
	
	Элемент.ТолькоВоВсехДействиях = ТолькоВоВсехДействиях;
	
КонецПроцедуры


// Создать подменю командной панели на форме.
// 
// Parameters:
//  Форма - ClientApplicationForm - Форма
//  ИмяЭлемента - String - Имя элемента
//  Родитель - Undefined, FormGroup, FormTable, FormField, FormButton, FormDecoration - Родитель
//  ИмяЭлементаПередКоторымВставлятьНовыйЭлемент - Undefined - Имя элемента перед которым вставлять новый элемент
//  Заголовок - String - Заголовок
//  Картинка - Undefined, Picture - Картинка
//  Отображение - Undefined - Отображение
&НаСервере
Процедура СоздатьПодменюКоманднойПанелиНаФорме(
	Форма, 
	ИмяЭлемента, 
	Родитель = Неопределено, 
	ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено,
	Заголовок = "",
	Картинка = Неопределено,
	Отображение = Неопределено) Экспорт
	
	Если НЕ Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		// элемент уже добавлен - можно проверять когда из формы вызывается пометка на удаление, то форма обновляется
		возврат;	
	КонецЕсли; 
	
	ЭлементПередКоторымВставлятьНовыйЭлемент = Форма.Элементы.Найти(ИмяЭлементаПередКоторымВставлятьНовыйЭлемент);
	Если 
		НЕ ИмяЭлементаПередКоторымВставлятьНовыйЭлемент = Неопределено
		И ЭлементПередКоторымВставлятьНовыйЭлемент = Неопределено 
		Тогда
		Сообщить("Не найден элемент "+ИмяЭлементаПередКоторымВставлятьНовыйЭлемент+" перед которым нужно вставлять элемент "+ИмяЭлемента);
		возврат;	
	КонецЕсли; 
	
	
	Элемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), Родитель, ЭлементПередКоторымВставлятьНовыйЭлемент);
	
	Элемент.Вид = ВидГруппыФормы.Подменю;
	Элемент.Видимость = Истина;
	Элемент.Доступность = Истина;
	
	Если Заголовок <> Неопределено Тогда
		Элемент.Заголовок = Заголовок;
	КонецЕсли;
	Если Картинка <> Неопределено Тогда
		Элемент.Картинка = Картинка;
	КонецЕсли;
	Если Отображение <> Неопределено Тогда
		Элемент.Отображение = Отображение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьУсловноеОформление();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектИсточникСпискаПриИзменении(Элемент)
	
	ОбъектИсточникСпискаПриИзмененииНаСервере(ОбъектИсточникСписка);

КонецПроцедуры

&НаСервере
Процедура ОбъектИсточникСпискаПриИзмененииНаСервере(ОбъектИсточник)
	ТипТекущегоОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектИсточник)).Имя;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектИсточникСпискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТипПердыдущегоОбъекта =  ТипТекущегоОбъекта;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПриИзменении(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяТабЧасти = Поле.Родитель.Имя;
	
	ТекСтрока = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		ПоказатьЗначение(,ТекСтрока[СтрЗаменить(Поле.Имя,ИмяТабЧасти,"")]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекОтображаемыхТипов(Команда)
	
	ОО = Новый ОписаниеОповещения("ОбновитьСписокЗавершение",ЭтаФорма);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОбъектИсточникСписка",ОбъектИсточникСписка);
	НеобходимоОбновление = Истина;
    ОткрытьФорму(ПолучитьПолноеИмяФормы("ФормаНастройкиТиповОтображемыхОбъектов"), ПараметрыФормы, ЭтаФорма,,,,ОО,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗавершение(Результат,ДопПараметры) Экспорт
	
	СоздатьОбновитьСписок();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СоздатьОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПриАктивизацииСтроки(Элемент)

	ТекСтрока = Элементы.Список.ТекущиеДанные;
		
	Если ТекСтрока <> Неопределено Тогда
		ОбъектИсточникСпискаПриИзмененииНаСервере(ТекСтрока.Ссылка);
		Если НеобходимоОбновление Тогда
			ТипПердыдущегоОбъекта = "";
			ПоказатьТабличнуюЧастьНаСервере(ТекСтрока.Ссылка);
		ИначеЕсли ТипТекущегоОбъекта = ТипПердыдущегоОбъекта Тогда
			УстановитьПараметрСписка(ТекСтрока.Ссылка);
		Иначе
			ПоказатьТабличнуюЧастьНаСервере(ТекСтрока.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ТипПердыдущегоОбъекта =  ТипТекущегоОбъекта;	

КонецПроцедуры // ОбработчикПриАктивизацииСтроки()

&НаКлиенте
Процедура ОбработчикСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.Список.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		ПоказатьЗначение(,ТекСтрока.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Если Элементы.Найти("Список") <> Неопределено Тогда
		ЭтаФорма.Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала); 
		ЭтаФорма.Список.Параметры.УстановитьЗначениеПараметра("КонецПериода",  ?(ЗначениеЗаполнено(Период.ДатаОкончания),Период.ДатаОкончания,ТекущаяДата()));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ПоказатьТабличнуюЧасть(Команда)
	ПоказатьТабличнуюЧастьНаСервере(ОбъектИсточникСписка);
КонецПроцедуры

&НаСервере
Процедура ПоказатьТабличнуюЧастьНаСервере(ОбъектИсточник)
	
	Если НеобходимоОбновление Тогда
		УдалениеРеквизитовИЭлементовФормы();
	КонецЕсли;
	НеобходимоОбновление = Ложь;
	
	Если ОбъектИсточник.Метаданные().ТабличныеЧасти.Количество() = 0 Тогда		
		УдалениеРеквизитовИЭлементовФормы();
		Возврат;
	КонецЕсли;
	
	
	НастройкиТЧ = ХранилищеОбщихНастроек.Загрузить("НастройкаОтображенияТабличныхЧастей",,Строка(ПараметрыСеанса.ТекущийПользователь));
	НесколькоТабличныхЧастей = Ложь;
	МассивТабличныхЧастей = Новый Массив;	
	Если НастройкиТЧ  <> Неопределено Тогда	
		Для Каждого Стр Из НастройкиТЧ Цикл	
			Если Стр.ТЧИспользовать И Стр.ОбъектНастройки = ТипТекущегоОбъекта Тогда
				Если МассивТабличныхЧастей.Найти(Стр.ТабличнаяЧасть) = Неопределено Тогда
					МассивТабличныхЧастей.Добавить(Стр.ТабличнаяЧасть);
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;	
		НесколькоТабличныхЧастей = МассивТабличныхЧастей.Количество()>1;
	КонецЕсли;
	
	Если МассивТабличныхЧастей.Количество() = 0 Тогда
		ТабЧасть = ОбъектИсточник.Метаданные().ТабличныеЧасти.Найти("Товары");
		Если ТабЧасть <> Неопределено Тогда
			МассивТабличныхЧастей.Добавить(ТабЧасть.Имя);
		Иначе
			МассивТабличныхЧастей.Добавить(ОбъектИсточник.Метаданные().ТабличныеЧасти[0].Имя);
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущаяТабЧасть = "";
	РеквизитыПредыдущегоОбъектаУдалены = Ложь;
	Для Каждого ТабЧасть Из МассивТабличныхЧастей Цикл
		ТекстЗапросаДинамическогоСписка = "";
		
		Для Каждого ТабличнаяЧасть Из ОбъектИсточник.Метаданные().ТабличныеЧасти Цикл
			СтруктураПоискаТЧ = Новый Структура;
			ИмяТабличнойЧасти = ТабЧасть;
			Если ТабличнаяЧасть.Имя = ИмяТабличнойЧасти Тогда // заменить на забор из настроек
				
				ТабличнаяЧастьСписка = ТабличнаяЧасть;
				Итерация = 1;
				КоличествоРеквизитов = ТабличнаяЧасть.Реквизиты.Количество();
				//Сформируем текст динамического запроса
				ТекстЗапросаДинамическогоСписка = "Выбрать";
				Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
					ТекстЗапросаДинамическогоСписка = ТекстЗапросаДинамическогоСписка +"
					|"+ТабличнаяЧасть.Имя+"."+РеквизитТЧ.Имя+?(Итерация =КоличествоРеквизитов,"",",");
					Итерация=Итерация+1;
				КонецЦикла;
				ТекстЗапросаДинамическогоСписка = ТекстЗапросаДинамическогоСписка + "
				|ИЗ 
				|	Документ."+ОбъектИсточник.Метаданные().Имя+"."+ТабличнаяЧасть.Имя +" КАК "+ ТабличнаяЧасть.Имя+"
				|
				|ГДЕ "+ТабличнаяЧасть.Имя+".Ссылка = &Ссылка";
				
				Если ИмяТекущейТабличнойЧасти <> "" И ТипТекущегоОбъекта <> "" Тогда
					Если ТипПердыдущегоОбъекта <> Метаданные.НайтиПоТипу(ТипЗнч(ОбъектИсточник)).Имя И ТипПердыдущегоОбъекта <> "" Тогда
						//Необходимо удалить предыдущий список
						Если НЕ РеквизитыПредыдущегоОбъектаУдалены Тогда
							 УдалениеРеквизитовИЭлементовФормы();
							 РеквизитыПредыдущегоОбъектаУдалены = Истина;
						КонецЕсли;
						ДобавлениеРеквизитовИЭлементовФормы(ИмяТабличнойЧасти,ТабличнаяЧастьСписка,ОбъектИсточник,ТекстЗапросаДинамическогоСписка,НастройкиТЧ,НесколькоТабличныхЧастей);
					ИначеЕсли ТекстЗапросаДинамическогоСписка <> "" И ТабЧасть <> ПредыдущаяТабЧасть Тогда
						ДобавлениеРеквизитовИЭлементовФормы(ИмяТабличнойЧасти,ТабличнаяЧастьСписка,ОбъектИсточник,ТекстЗапросаДинамическогоСписка,НастройкиТЧ,НесколькоТабличныхЧастей);
					КонецЕсли;
				Иначе
					ДобавлениеРеквизитовИЭлементовФормы(ИмяТабличнойЧасти,ТабличнаяЧастьСписка,ОбъектИсточник,ТекстЗапросаДинамическогоСписка,НастройкиТЧ,НесколькоТабличныхЧастей);
					РеквизитыПредыдущегоОбъектаУдалены = Истина;
				КонецЕсли;	
				ПредыдущаяТабЧасть = ИмяТабличнойЧасти;
			КонецЕсли;
			
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройки(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОбъектИсточникСписка",ОбъектИсточникСписка);
    ОткрытьФорму(ПолучитьПолноеИмяФормы("ФормаНастроек"), ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНастройки(Команда)
	ОчиститьНастройкиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчиститьНастройкиНаСервере()
	
	ТЗ = Неопределено;
	ХранилищеОбщихНастроек.Сохранить("НастройкаОтображенияТабличныхЧастей",,ТЗ);
	ХранилищеОбщихНастроек.Сохранить("НастройкиИспользуемыхТипов",,ТЗ);
	
	Сообщить("Настройки очищены");
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиКонтекст(Команда)
	ВыполнитьКоманду(Команда.Имя);	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведенияКонтекст(Команда)
	
	ВыполнитьКоманду(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаленияКонтекст(Команда)
	
	ВыполнитьКоманду(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКонтекст(Команда)
	
	ВыполнитьКоманду(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКонтекст(Команда)
	
	ВыполнитьКоманду(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиКоманднаяПанель(Команда)
	
	ВыполнитьКоманду(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведенияКоманднаяПанель(Команда)
	
	ВыполнитьКоманду(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаленияКоманднаяПанель(Команда)
	
	ВыполнитьКоманду(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКоманднаяПанель(Команда)
	
	ВыполнитьКоманду(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоманднаяПанель(Команда)
	
	ВыполнитьКоманду(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБыстрыйОтбор(Команда)
	
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлементаОтбора 		= Элементы.Список.ТекущийЭлемент.Имя;
	ИмяЭлементаОтбора = СтрЗаменить(ИмяЭлементаОтбора,"_",".");
	ЗначениеЭлементаОтбора 	= Элементы.Список.ТекущиеДанные[ИмяЭлементаОтбора];	
	
	ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяЭлементаОтбора);
	
	//Сначала поищем
	ЭлементОтбора = Неопределено;
	Для каждого ТекЭлементОтбора из ЭтаФорма.Список.Отбор.Элементы Цикл
		
		Если ТекЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение Тогда
			ЭлементОтбора = ТекЭлементОтбора;
			Прервать;
		КонецЕсли;		
		
	КонецЦикла;	
	
	Если (ЭлементОтбора = Неопределено) Тогда 	
		//Добавим новый элемент отбора
		ЭлементОтбора = ЭтаФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= ЛевоеЗначение;
		ЭлементОтбора.ПравоеЗначение	= ЗначениеЭлементаОтбора;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование 	= Истина;	
	Иначе	
		//Изменим найденный
		Если (ЭлементОтбора.ПравоеЗначение = ЗначениеЭлементаОтбора) Тогда			
			ЭлементОтбора.Использование = НЕ ЭлементОтбора.Использование;
		Иначе
			ЭлементОтбора.ПравоеЗначение	= ЗначениеЭлементаОтбора;
			ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование 	= Истина;	
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтборы(Команда)
	
	ЭтаФорма.Список.Отбор.Элементы.Очистить();

	
КонецПроцедуры

#КонецОбласти

#Область СозданиеЭлементовФормы

&НаСервере
Процедура ДобавлениеРеквизитовИЭлементовФормы(ИмяТабличнойЧасти,ТабличнаяЧастьСписка,ОбъектИсточникСписка,ТекстЗапросаДинамическогоСписка,НастройкиТЧ,НесколькоТабличныхЧастей)
	
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяТабличнойЧасти, Новый ОписаниеТипов("ДинамическийСписок"),,ИмяТабличнойЧасти));
	Попытка
		ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
	Исключение
		Возврат;
	КонецПопытки;

		
	ЭтаФорма[ИмяТабличнойЧасти].ТекстЗапроса = ТекстЗапросаДинамическогоСписка;
	ЭтаФорма[ИмяТабличнойЧасти].Параметры.УстановитьЗначениеПараметра("Ссылка", ОбъектИсточникСписка);
	
	Если НесколькоТабличныхЧастей Тогда
		ИмяГруппыСтраниц = "ГруппаСтраницТабличныхЧастейВСписке";
		ЭлементГруппаСтраниц = ЭтаФорма.Элементы.Найти(ИмяГруппыСтраниц);
		Если ЭлементГруппаСтраниц = Неопределено Тогда
			СоздатьГруппуСтраницНаФорме(ЭтаФорма,ИмяГруппыСтраниц,ЭтаФорма.Элементы.Найти("ГруппаТЧ"));
		КонецЕсли;
	КонецЕсли;
	
	Если Не НесколькоТабличныхЧастей Тогда
		СоздатьОбычнуюГруппуНаФорме(ЭтаФорма,"Группа"+ИмяТабличнойЧасти,ЭтаФорма.Элементы.Найти("ГруппаТЧ"),,,,,,ПоведениеОбычнойГруппы.Обычное); //Возможен конфликт элементов на форме. Имя элемента должно быть с уидом
	Иначе
		СоздатьСтраницуНаФорме(ЭтаФорма,"Группа"+ИмяТабличнойЧасти,ЭтаФорма.Элементы[ИмяГруппыСтраниц],,,ИмяТабличнойЧасти);
	КонецЕсли;
	СоздатьТаблицуНаФорме(ЭтаФорма, ИмяТабличнойЧасти, ИмяТабличнойЧасти,ЭтаФорма.Элементы["Группа"+ИмяТабличнойЧасти],Истина,,,,ПоложениеЗаголовкаЭлементаФормы.Нет,,Истина);
	Элемент_ТЧ = ЭтаФорма.Элементы.Найти(ИмяТабличнойЧасти);
	СоздатьОбработчикПоляФормы(ЭтаФорма,Элемент_ТЧ.Имя,"Выбор", "ОбработчикПриИзменении");
	Для Каждого РеквизитТЧ Из ТабличнаяЧастьСписка.Реквизиты Цикл
		СоздатьКолонкуДинамическогоСпискаНаФорме(ЭтаФорма, ИмяТабличнойЧасти + РеквизитТЧ.Имя, ТабличнаяЧастьСписка.Имя+"."+РеквизитТЧ.Имя, Элемент_ТЧ); //Возможен конфликт элементов на форме. Имя элемента должно быть с уидом
			Если НастройкиТЧ <> Неопределено Тогда
			СтруктураПоиска  = Новый Структура;
			СтруктураПоиска.Вставить("ТабличнаяЧасть",ТабличнаяЧастьСписка.Имя);
			СтруктураПоиска.Вставить("Колонка",РеквизитТЧ.Имя);
			СтруктураПоиска.Вставить("ОбъектНастройки",Метаданные.НайтиПоТипу(ТипЗнч(ОбъектИсточникСписка)).Имя);
			НайденныеСтроки = НастройкиТЧ.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЭлементФормы = ЭтаФорма.Элементы.Найти(ИмяТабличнойЧасти + РеквизитТЧ.Имя);
				Если ЭлементФормы <> Неопределено Тогда
					ЭлементФормы.Видимость = НайденныеСтроки[0].Использовать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИмяТекущейТабличнойЧасти = ТабличнаяЧастьСписка.Имя;
	ТипТекущегоОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектИсточникСписка)).Имя;
	ТипПердыдущегоОбъекта = ТипТекущегоОбъекта;
КонецПроцедуры

&НаСервере
Процедура УдалениеРеквизитовИЭлементовФормы()
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивПоля = Новый Массив;
	
	Если Элементы.Найти("ГруппаСтраницТабличныхЧастейВСписке") <> Неопределено Тогда
		Для Каждого УдаляемыйЭлементСтраница Из Элементы["ГруппаСтраницТабличныхЧастейВСписке"].ПодчиненныеЭлементы Цикл
			Для Каждого УдаляемыйЭлемент Из Элементы[УдаляемыйЭлементСтраница.Имя].ПодчиненныеЭлементы Цикл
				ЭлементУдаления = УдаляемыйЭлемент.ПутьКДанным;
				ПолеУдаляемогоЭлемента = Элементы[УдаляемыйЭлементСтраница.Имя].ПодчиненныеЭлементы.Найти(УдаляемыйЭлемент.ПутьКДанным);
				МассивПоля.Добавить(ПолеУдаляемогоЭлемента);
				МассивУдаляемыхРеквизитов.Добавить(ЭлементУдаления);
			КонецЦикла;	
		КонецЦикла;
	Иначе
		Если Элементы.Найти("Группа"+ИмяТекущейТабличнойЧасти) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Для Каждого УдаляемыйЭлемент Из Элементы["Группа"+ИмяТекущейТабличнойЧасти].ПодчиненныеЭлементы Цикл
			ЭлементУдаления = УдаляемыйЭлемент.ПутьКДанным;
			ПолеУдаляемогоЭлемента = Элементы["Группа"+ИмяТекущейТабличнойЧасти].ПодчиненныеЭлементы.Найти(УдаляемыйЭлемент.ПутьКДанным);
			МассивПоля.Добавить(ПолеУдаляемогоЭлемента);
			МассивУдаляемыхРеквизитов.Добавить(ЭлементУдаления);
		КонецЦикла;
	КонецЕсли;
	
	
	
	Для Каждого Стр Из Массивполя Цикл 
		Элементы.Удалить(Стр);
	КонецЦикла;
	
	Элементы.Удалить(Элементы["Группа"+ИмяТекущейТабличнойЧасти]);
	Если Элементы.Найти("ГруппаСтраницТабличныхЧастейВСписке") <> Неопределено Тогда
		Элементы.Удалить(Элементы["ГруппаСтраницТабличныхЧастейВСписке"]);
	КонецЕсли;
	ЭтаФорма.ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОбновитьСписок()
	
	//Получим настройки и сформируем запрос динамического списка
	НастройкиИспользуемыхТипов = ХранилищеОбщихНастроек.Загрузить("НастройкиИспользуемыхТипов",,Строка(ПараметрыСеанса.ТекущийПользователь));
	Если НастройкиИспользуемыхТипов <> Неопределено Тогда
		МассивРеквизитовСписка = Новый Массив;
		МассивРеквизитовСписка.Добавить("Картинка");
		МассивРеквизитовСписка.Добавить("Номер");
		МассивРеквизитовСписка.Добавить("Дата");
		МассивРеквизитовСписка.Добавить("ТипДокумента");
		МассивРеквизитовСписка.Добавить("Ссылка");
		ШаблонДинамическогоСписка = 
		"
		|ВЫБРАТЬ
		|   ВЫБОР
		|		КОГДА НЕ %ТипОбъекта%.Проведен И НЕ %ТипОбъекта%.ПометкаУдаления
		|			ТОГДА 0
		|		КОГДА %ТипОбъекта%.Проведен
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Картинка,
		|	%ТипОбъекта%.Ссылка,
		|	ТИПЗНАЧЕНИЯ(%ТипОбъекта%.Ссылка) КАК ТипДокумента,
		|	%ТипОбъекта%.Номер,
		|	%ТипОбъекта%.Дата,
		|	%ТипОбъекта%.Проведен,
		|	%ТипОбъекта%.ПометкаУдаления
		|ИЗ
		|	Документ.%ТипОбъекта% КАК %ТипОбъекта%
		|ГДЕ
		|   %ТипОбъекта%.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
		Итерация = 0;
		ТекстЗапросаДинамическогоСписка = "";
		Для Каждого СтрокаНастройки Из НастройкиИспользуемыхТипов Цикл
			Если Итерация = 0 Тогда
				ТекстЗапросаДинамическогоСписка = СтрЗаменить(ШаблонДинамическогоСписка,"%ТипОбъекта%",СтрокаНастройки.ИмяТипа);	
			Иначе
				ТекстЗапросаДинамическогоСписка = ТекстЗапросаДинамическогоСписка +
				"
				 |ОБЪЕДИНИТЬ ВСЕ
				 |";
				 ТекстЗапросаДинамическогоСписка = ТекстЗапросаДинамическогоСписка+СтрЗаменить(ШаблонДинамическогоСписка,"%ТипОбъекта%",СтрокаНастройки.ИмяТипа); 
			КонецЕсли;
			Итерация = Итерация +1;
		КонецЦикла;
		
		Если Элементы.Найти("Список") = Неопределено Тогда
			МассивРеквизитов = Новый Массив;
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Список", Новый ОписаниеТипов("ДинамическийСписок"),,"Список"));
			ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
		КонецЕсли;
		
			

		
		ЭтаФорма.Список.ТекстЗапроса = ТекстЗапросаДинамическогоСписка;
		ЭтаФорма.Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		ЭтаФорма.Список.Параметры.УстановитьЗначениеПараметра("КонецПериода",?(ЗначениеЗаполнено(Период.ДатаОкончания),Период.ДатаОкончания,ТекущаяДата()));
		


		
		Если Элементы.Найти("Список") = Неопределено Тогда
			СоздатьТаблицуНаФорме(ЭтаФорма, "Список", "Список",ЭтаФорма.Элементы.Найти("ГруппаОсновныеДанные"),Истина,,"ГруппаТЧ",,ПоложениеЗаголовкаЭлементаФормы.Нет,,Истина);
			СоздатьОбработчикПоляФормы(ЭтаФорма,"Список","ПриАктивизацииСтроки", "ОбработчикПриАктивизацииСтроки");
			СоздатьОбработчикПоляФормы(ЭтаФорма,"Список","ПередНачаломИзменения", "СписокПередНачаломИзменения");
			СоздатьКнопкиСозданияНовыхЭлементоы(НастройкиИспользуемыхТипов);
			СоздатьКомандуНаФорме(ЭтаФорма,"УстановитьБыстрыйОтбор",,ЭтаФорма.Элементы.СписокКоманднаяПанель,,,,,,,"Установить быстрый отбор",БиблиотекаКартинок.ОтборПоТекущемуЗначению,ОтображениеКнопки.Картинка);
			СоздатьКомандуНаФорме(ЭтаФорма,"СнятьВсеОтборы",,ЭтаФорма.Элементы.СписокКоманднаяПанель,,,,,,,"Снять все отборы",БиблиотекаКартинок.ОтключитьОтбор,ОтображениеКнопки.Картинка);

		
			
			Родитель = ЭтаФорма.Элементы.Найти("СписокКонтекстноеМеню");
			
			Если Родитель <> Неопределено Тогда
				СоздатьКомандуНаФорме(ЭтаФорма,"ПровестиКонтекст", ,Родитель,,,,,,,"Провести",БиблиотекаКартинок.Провести);
				СоздатьКомандуНаФорме(ЭтаФорма,"ОтменаПроведенияКонтекст", ,Родитель,,,,,,,"Отмена проведения",БиблиотекаКартинок.ОтменаПроведения);
				СоздатьКомандуНаФорме(ЭтаФорма,"ПометкаУдаленияКонтекст", ,Родитель,,,,,,,"Пометить на удаление / Снять пометку",БиблиотекаКартинок.ПометитьНаУдаление);
				СоздатьКомандуНаФорме(ЭтаФорма,"СкопироватьКонтекст", ,Родитель,,,,,,,"Скопировать",БиблиотекаКартинок.СкопироватьОбъект,,,Клавиша.F9);
				СоздатьКомандуНаФорме(ЭтаФорма,"ИзменитьКонтекст", ,Родитель,,,,,,,"Изменить",БиблиотекаКартинок.Изменить,,,Клавиша.F2);
			КонецЕсли;
			
			Родитель = ЭтаФорма.Элементы.Найти("СписокКоманднаяПанель");
			
			Если Родитель <> Неопределено Тогда
				СоздатьКомандуНаФорме(ЭтаФорма,"ПровестиКоманднаяПанель", ,Родитель,,,,,,,"Провести",БиблиотекаКартинок.Провести,,Истина);
				СоздатьКомандуНаФорме(ЭтаФорма,"ОтменаПроведенияКоманднаяПанель", ,Родитель,,,,,,,"Отмена проведения",БиблиотекаКартинок.ОтменаПроведения,,Истина);
				СоздатьКомандуНаФорме(ЭтаФорма,"ПометкаУдаленияКоманднаяПанель", ,Родитель,,,,,,,"Пометить на удаление / Снять пометку",БиблиотекаКартинок.ПометитьНаУдаление,,Истина);		
				СоздатьКомандуНаФорме(ЭтаФорма,"СкопироватьКоманднаяПанель", ,Родитель,,,,,,,"Скопировать",БиблиотекаКартинок.СкопироватьОбъект,,Истина,Клавиша.F9);
				СоздатьКомандуНаФорме(ЭтаФорма,"ИзменитьКоманднаяПанель", ,Родитель,,,,,,,"Изменить",БиблиотекаКартинок.Изменить,,Истина,Клавиша.F2);
			КонецЕсли;

			
			Итерация = 0;
			Для Каждого Элм Из МассивРеквизитовСписка Цикл
				Если Итерация = 0 Тогда
					Картинка = БиблиотекаКартинок.СтатусыДокумента;
					СоздатьКолонкуДинамическогоСпискаНаФормеКартинка(ЭтаФорма,Элм , "Список."+Элм, ЭтаФорма.Элементы.Список,,,,,Картинка);	
				Иначе
					СоздатьКолонкуДинамическогоСпискаНаФорме(ЭтаФорма,Элм , "Список."+Элм, ЭтаФорма.Элементы.Список);
				КонецЕсли;
				
				Итерация=Итерация+1;
			КонецЦикла;
			СоздатьОбработчикПоляФормы(ЭтаФорма,"Список","Выбор", "ОбработчикСписокВыбор");
			ЭтаФорма.Список.УстановитьОбязательноеИспользование("Ссылка", Истина);
		Иначе
			СоздатьКнопкиСозданияНовыхЭлементоы(НастройкиИспользуемыхТипов);	
		КонецЕсли;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

Процедура СоздатьКнопкиСозданияНовыхЭлементоы(НастройкиИспользуемыхТипов)
	
	Если ЭтаФорма.Элементы.Найти("Создать") = Неопределено Тогда
		СоздатьПодменюКоманднойПанелиНаФорме(ЭтаФорма,"Создать",ЭтаФорма.Элементы.СписокКоманднаяПанель,,"Создать...",БиблиотекаКартинок.СоздатьЭлементСписка,ОтображениеКнопки.КартинкаИТекст);
	КонецЕсли;
	
	МассивПоля = Новый Массив;
	
	Для Каждого УдаляемыйЭлемент Из Элементы["Создать"].ПодчиненныеЭлементы Цикл
		ЭлементУдаления = УдаляемыйЭлемент.ИмяКоманды;
		ПолеУдаляемогоЭлемента = Элементы["Создать"].ПодчиненныеЭлементы.Найти(УдаляемыйЭлемент.ИмяКоманды);
		МассивПоля.Добавить(ПолеУдаляемогоЭлемента);
	КонецЦикла;
	
	Для Каждого Стр Из Массивполя Цикл 
		Элементы.Удалить(Стр);
	КонецЦикла;
	
	Для Каждого СтрокаТипа Из НастройкиИспользуемыхТипов Цикл
		Попытка
			ЭтаФорма.Команды.Удалить(СтрокаТипа.ИмяТипа);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	
	Для Каждого СтрокаТипа Из НастройкиИспользуемыхТипов Цикл
		Если ЭтаФорма.Элементы.Найти(СтрокаТипа.ИмяТипа) = Неопределено Тогда
			СоздатьКомандуНаФорме(ЭтаФорма,СтрокаТипа.ИмяТипа,,Элементы.Создать,,,,,,,СтрокаТипа.СинонимТипа,,,,,"СозданиеНовогоДокумента");
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьПолноеИмяФормы(ИмяФормы)

	МассивСтрок = РазложитьСтрокуВМассивПодстрок(ЭтаФорма.ИмяФормы,".");
	КоличествоЭлементов = МассивСтрок.Количество()-1;
	
	РезультирующаяСтрока = "";
	Итерация = 0;
	Для Каждого Элм Из МассивСтрок Цикл
		Если Итерация < КоличествоЭлементов Тогда
			Если Итерация = 0 Тогда
				РезультирующаяСтрока = Элм;
			Иначе
				РезультирующаяСтрока=РезультирующаяСтрока+"."+ Элм;	
			КонецЕсли;
		КонецЕсли;
		Итерация=Итерация+1;
	КонецЦикла;
	
	РезультирующаяСтрока = РезультирующаяСтрока +"."+ ИмяФормы;
	
	Возврат РезультирующаяСтрока;

КонецФункции

&НаСервере
Процедура УстановитьПараметрСписка(ОбъектИсточник)
	
	НастройкиТЧ = ХранилищеОбщихНастроек.Загрузить("НастройкаОтображенияТабличныхЧастей",,Строка(ПараметрыСеанса.ТекущийПользователь));
	НесколькоТабличныхЧастей = Ложь;
	МассивТабличныхЧастей = Новый Массив;	
	Если НастройкиТЧ  <> Неопределено Тогда	
		Для Каждого Стр Из НастройкиТЧ Цикл	
			Если Стр.ТЧИспользовать И Стр.ОбъектНастройки = ТипТекущегоОбъекта Тогда
				Если МассивТабличныхЧастей.Найти(Стр.ТабличнаяЧасть) = Неопределено Тогда
					МассивТабличныхЧастей.Добавить(Стр.ТабличнаяЧасть);
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;	
	КонецЕсли;
	
	Если МассивТабличныхЧастей.Количество() = 0 Тогда
		ТабЧасть = ОбъектИсточник.Метаданные().ТабличныеЧасти.Найти("Товары");
		Если ТабЧасть <> Неопределено Тогда
			МассивТабличныхЧастей.Добавить(ТабЧасть.Имя);
		Иначе
			МассивТабличныхЧастей.Добавить(ОбъектИсточник.Метаданные().ТабличныеЧасти[0].Имя);
		КонецЕсли;
	КонецЕсли;
	Для Каждого ИмяТабличнойЧасти Из МассивТабличныхЧастей Цикл 
		ЭтаФорма[ИмяТабличнойЧасти].Параметры.УстановитьЗначениеПараметра("Ссылка", ОбъектИсточник);
	КонецЦикла;
	
КонецПроцедуры // ()

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые
//  строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
// Примечание:
//  В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
//  рекомендуется использовать функцию платформы СтрРазделить.
&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Процедура ВыполнитьКоманду(ИмяКомандыТ)
	
	ИмяКомандыСтр = ИмяКомандыТ;
	
	ИмяКомандыСтр = СтрЗаменить(ИмяКомандыСтр,"Контекст","");
	ИмяКомандыСтр = СтрЗаменить(ИмяКомандыСтр,"КоманднаяПанель","");
	
	МассивВыделенныхОбъектов = ЭтаФорма.Элементы.Список.ВыделенныеСтроки;
	
	Массив = Новый Массив;
	Для Каждого Элм Из МассивВыделенныхОбъектов Цикл
		Массив.Добавить(Элм);
	КонецЦикла;
	
	Если ИмяКомандыСтр = "Провести" Тогда
		ПровестиДокументы(ЭтаФорма.Элементы.Список,"Универсальный журнал документов");
	ИначеЕсли ИмяКомандыСтр = "ОтменаПроведения" Тогда
		ОтменаПроведения(ЭтаФорма.Элементы.Список,"Универсальный журнал документов");
	ИначеЕсли ИмяКомандыСтр = "ПометкаУдаления" Тогда
		УстановитьПометкуУдаления(ЭтаФорма.Элементы.Список,"Универсальный журнал документов");
	ИначеЕсли ИмяКомандыСтр = "Изменить" Тогда
		Если Массив.Количество() = 1 Тогда
			МассивСсылок = СсылкиДокументовДинамическогоСписка(МассивВыделенныхОбъектов);
			Попытка
				ПоказатьЗначение(,МассивСсылок[0]);
			Исключение
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ИмяКомандыСтр = "Скопировать" Тогда
		МассивСсылок = СсылкиДокументовДинамическогоСписка(МассивВыделенныхОбъектов);
		Если Массив.Количество() = 1 Тогда
			Элемент = МассивСсылок[0];
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначениеКопирования", Элемент);
			
			ИмяФормыОбъекта = ПолноеИмяФормыОбъекта(Элемент);
			
			ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы);
			
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элм Из Массив Цикл
		ЭтаФорма.Элементы.Список.ВыделенныеСтроки.Добавить(Элм);
	КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведения(Список, ТипСписка) Экспорт
	
	ОчиститьСообщения();
	ВыделенныеСтроки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
	МассивСсылок = СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РаспроведенныеДокументы = СсылкиРаспроведенныхДокументов(МассивСсылок);
	
	Если РаспроведенныеДокументы.Количество() > 0 Тогда
		ОповещениеПроведенияОтменыПроведенияДокумента(Список, РаспроведенныеДокументы, ТипСписка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "Установить пометку удаления"
//
//	Параметры:
//		Список - ТаблицаФормы,
//		ТипСписка - Строка - тип документов списка.
//		Оповещение - ОписаниеОповещения - оповещение, которое должно быть вызвано после завершения попытки пометки на удаление
//
&НаКлиенте
Процедура УстановитьПометкуУдаления(СписокФ, ТипСписка, ОповещениеОЗавершении = Неопределено) Экспорт 
	
	ТекущиеДанные = СписокФ.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ВыделенныеСтроки = ПроверитьПолучитьВыделенныеВСпискеСсылки(СписокФ);
		
		Если ВыделенныеСтроки.Количество() = 1 Тогда
			
			МассивСсылокФ = СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
			Документ = МассивСсылокФ[0];
			ЕстьСтрокиПомеченныеНаУдаление = ПолучитьЗначениеРеквизита(Документ,"ПометкаУдаления");;
			
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(Документ);
			
			ТекстВопроса = ?(ЕстьСтрокиПомеченныеНаУдаление,
				НСтр("ru='Снять с ""%Документ%"" пометку на удаление?'"),
				НСтр("ru='Пометить ""%Документ%"" на удаление?'"));
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Документ%", Документ);
			
		Иначе
			
			Результат = СсылкиОбъектовПомеченныхНаУдаление(ВыделенныеСтроки, "Ссылка");
			
			МассивСсылок = Результат.МассивСсылок;
			ЕстьСтрокиПомеченныеНаУдаление = Результат.ЕстьСтрокиПомеченныеНаУдаление;
			
			ТекстВопроса = ?(Результат.ЕстьСтрокиПомеченныеНаУдаление,
				НСтр("ru='Снять с выделенных элементов пометку на удаление?'"),
				НСтр("ru='Пометить выделенные элементы на удаление?'"));
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Список", 						СписокФ);
		ДополнительныеПараметры.Вставить("ВыделенныеСтроки", 			МассивСсылок);
		ДополнительныеПараметры.Вставить("ТипСписка", 					ТипСписка);
		ДополнительныеПараметры.Вставить("УстановкаПометкиУдаления", 	Не ЕстьСтрокиПомеченныеНаУдаление);
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 		ОповещениеОЗавершении);
		
		Оповещение = Новый ОписаниеОповещения("УстановитьПометкуУдаленияЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет оповещение пользователя об осуществленной установке пометки на удаление
// или снятия пометки с удаления документа, а также записывает в историю информацию об изменениях объекта.
//
//	Параметры:
//		РезультатВопроса - КодВозвратаДиалога - результат ответа на вопрос,
//		ДополнительныеПараметры - Структура - дополнительные параметры.
//
&НаКлиенте
Процедура УстановитьПометкуУдаленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОповещениеОЗавершении = ДополнительныеПараметры.ОповещениеОЗавершении;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		СписокФ = ДополнительныеПараметры.Список;
		ТипСписка = ДополнительныеПараметры.ТипСписка;
		МассивСсылок = ДополнительныеПараметры.ВыделенныеСтроки;
		ПометитьНаУдаление = ДополнительныеПараметры.УстановкаПометкиУдаления;
		
		УстановитьПометкуУдаленияЗавершениеСервер(МассивСсылок, ПометитьНаУдаление);
		
		Если МассивСсылок.Количество() > 1 Тогда
			Документ = ТипСписка;
			ТекстОповещения = ?(Не ПометитьНаУдаление, 
				НСтр("ru='Пометка удаления снята (%КоличествоДокументов%)'"),
				НСтр("ru='Пометка удаления установлена (%КоличествоДокументов%)'"));
			ТекстОповещения = СтрЗаменить(ТекстОповещения, "%КоличествоДокументов%", МассивСсылок.Количество());
		Иначе
			Документ = МассивСсылок[0];
			ТекстОповещения = ?(Не ПометитьНаУдаление,
				НСтр("ru='Пометка удаления снята'"),
				НСтр("ru='Пометка удаления установлена'"));
		КонецЕсли;
		
		СписокФ.Обновить();
		ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Документ), Строка(Документ),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	Если ОповещениеОЗавершении <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВопроса);
	КонецЕсли;
	
КонецПроцедуры

// Провести документы.
// 
// Parameters:
//  СписокФ - FormGroup, FormTable, FormField, FormButton, FormDecoration - Список Ф
//  ТипСписка - String - Тип списка
&НаКлиенте
Процедура ПровестиДокументы(СписокФ, ТипСписка) Экспорт
	
	ОчиститьСообщения();
	ВыделенныеСтроки = ПроверитьПолучитьВыделенныеВСпискеСсылки(СписокФ);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НепроведенныеДокументы = Новый Массив;
	ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен: %2'");
	МассивСсылок = СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	ДанныеОНепроведенныхДокументах = ПровестиДокументыСервер(МассивСсылок);
	
	Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
		СообщитьПользователю(
			ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Строка(ИнформацияОДокументе.Ссылка),
				ИнформацияОДокументе.ОписаниеОшибки),
			ИнформацияОДокументе.Ссылка);
		
		НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
	КонецЦикла;
	
	ПроведенныеДокументы = СократитьМассив(МассивСсылок, НепроведенныеДокументы);
	
	Если НепроведенныеДокументы.Количество() > 0 Тогда
		КнопкиДиалога = Новый СписокЗначений;
		КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'ОК'"));
		
		ТекстДиалога = НСтр("ru = 'Не удалось провести один или несколько документов.'");
		ДополнительныеПараметры = Новый Структура("Список, ПроведенныеДокументы, ТипСписка",
			СписокФ, ПроведенныеДокументы, ТипСписка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПроведенностьДокументовЗавершение", ЭтаФорма,
			ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстДиалога, КнопкиДиалога);
	Иначе
		ОповещениеПроведенияОтменыПроведенияДокумента(СписокФ, МассивСсылок, ТипСписка);
	КонецЕсли;
	
КонецПроцедуры


// Проверить получить выделенные в списке ссылки.
// 
// Parameters:
//  Список - FormGroup, FormTable, FormField, FormButton, FormDecoration - Список
// 
// Returns:
//  Array - Проверить получить выделенные в списке ссылки
&НаКлиенте
Функция ПроверитьПолучитьВыделенныеВСпискеСсылки(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для Итератор = 0 По Список.ВыделенныеСтроки.Количество() - 1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(Список.ВыделенныеСтроки[Итератор]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта!'"));
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции


// Ссылки документов динамического списка.
// 
// Parameters:
//  ВыделенныеСтроки - Array - Выделенные строки
// 
// Returns:
//  Array - Ссылки документов динамического списка
&НаКлиенте
Функция СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		ЭтаФорма.Элементы.Список.ТекущаяСтрока = Строка;
		ТекСтрока = ЭтаФорма.Элементы.Список.ТекущиеДанные;
		МассивСсылок.Добавить(ТекСтрока.Ссылка);
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции


// Провести документы сервер.
// 
// Parameters:
//  Документы - Array - Документы
// 
// Returns:
//  Array - Провести документы сервер
&НаСервере
Функция ПровестиДокументыСервер(Документы) Экспорт
	
	НепроведенныеДокументы = Новый Массив;
	
	Для Каждого ДокументСсылка Из Документы Цикл
		
		ВыполненоУспешно = Ложь;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			РежимПроведения = РежимПроведенияДокумента.Неоперативный;
			Если ДокументОбъект.Дата >= НачалоДня(ТекущаяДатаСеанса())
				И ДокументСсылка.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить Тогда
					РежимПроведения = РежимПроведенияДокумента.Оперативный;
			КонецЕсли;
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведения);
				ВыполненоУспешно = Истина;
			Исключение
				ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		Иначе
			ПредставлениеОшибки = НСтр("ru = 'Поля документа не заполнены.'");
		КонецЕсли;
		
		Если Не ВыполненоУспешно Тогда
			НепроведенныеДокументы.Добавить(Новый Структура("Ссылка,ОписаниеОшибки", ДокументСсылка, ПредставлениеОшибки));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НепроведенныеДокументы;
	
КонецФункции


// Сообщить пользователю.
// 
// Parameters:
//  ТекстСообщенияПользователю - String - Текст сообщения пользователю
//  КлючДанных - Undefined - Ключ данных
//  Поле - String - Поле
//  ПутьКДанным - String - Путь к данным
//  Отказ - Boolean - Отказ
&НаСервере
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры


// Подставить параметры в строку.
// 
// Parameters:
//  СтрокаПодстановки - String - Строка подстановки
//  Параметр1 - String - Параметр1
//  Параметр2 - Undefined - Параметр2
//  Параметр3 - Undefined - Параметр3
//  Параметр4 - Undefined - Параметр4
//  Параметр5 - Undefined - Параметр5
//  Параметр6 - Undefined - Параметр6
//  Параметр7 - Undefined - Параметр7
//  Параметр8 - Undefined - Параметр8
//  Параметр9 - Undefined - Параметр9
// 
// Returns:
//  String - Подставить параметры в строку
&НаСервере
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

// Вычитает один массив элементов из другого массива. Возвращает результат вычитания.
//
// Параметры:
//  Массив - Массив - массив элементов, из которого необходимо выполнить вычитание;
//  МассивВычитания - Массив - массив элементов, который будет вычитаться.
// 
// Возвращаемое значение:
//  Массив - результат вычитания двух массивов.
//
&НаСервере
Функция СократитьМассив(Массив, МассивВычитания) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если МассивВычитания.Найти(Элемент) = Неопределено Тогда
			
			Результат.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Проверить проведенность документов завершение.
// 
// Parameters:
//  РезультатВопроса Результат вопроса
//  ДополнительныеПараметры Дополнительные параметры
&НаКлиенте
Процедура ПроверитьПроведенностьДокументовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> Неопределено Тогда
		Список = ДополнительныеПараметры.Список;
		ТипСписка = ДополнительныеПараметры.ТипСписка;
		ПроведенныеДокументы = ДополнительныеПараметры.ПроведенныеДокументы;
		
		Если ПроведенныеДокументы.Количество() > 0 Тогда
			ОповещениеПроведенияОтменыПроведенияДокумента(Список, ПроведенныеДокументы, ТипСписка);
		Иначе
			Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// Оповещение проведения отмены проведения документа.
// 
// Parameters:
//  СписокФ - FormGroup, FormTable, FormField, FormButton, FormDecoration - Список Ф
//  ВыделенныеСтроки - Array - Выделенные строки
//  ТипСписка - String - Тип списка
&НаКлиенте
Процедура ОповещениеПроведенияОтменыПроведенияДокумента(СписокФ, ВыделенныеСтроки, ТипСписка)
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Документ = ТипСписка;
		ТекстОповещения = НСтр("ru='Изменение (%КоличествоДокументов%)'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%КоличествоДокументов%", ВыделенныеСтроки.Количество());
	Иначе
		Документ = ВыделенныеСтроки[0];
		ТекстОповещения = НСтр("ru='Изменение'");
	КонецЕсли;
	
	СписокФ.Обновить();
	ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Документ), Строка(Документ),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры


// Подставить параметры в строку альтернативный алгоритм.
// 
// Parameters:
//  СтрокаПодстановки - String - Строка подстановки
//  Параметр1 - String - Параметр1
//  Параметр2 - Undefined - Параметр2
//  Параметр3 - Undefined - Параметр3
//  Параметр4 - Undefined - Параметр4
//  Параметр5 - Undefined - Параметр5
//  Параметр6 - Undefined - Параметр6
//  Параметр7 - Undefined - Параметр7
//  Параметр8 - Undefined - Параметр8
//  Параметр9 - Undefined - Параметр9
// 
// Returns:
//  String - Подставить параметры в строку альтернативный алгоритм
&НаСервере
Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = Неопределено;
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = Неопределено Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции


// Ссылки распроведенных документов.
// 
// Parameters:
//  МассивСсылок - Array - Массив ссылок
// 
// Returns:
//  Array - Ссылки распроведенных документов
&НаСервере
Функция СсылкиРаспроведенныхДокументов(МассивСсылок) Экспорт
	
	РаспроведенныеДокументы = Новый Массив;
	НепроведенныеДокументы = ПроверитьПроведенностьДокументов(МассивСсылок);
	РаспроводимыеДокументы = СократитьМассив(МассивСсылок, НепроведенныеДокументы);
	
	Для Каждого Ссылка Из РаспроводимыеДокументы Цикл
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЦикла;
	
	Возврат РаспроводимыеДокументы;
	
КонецФункции

// Проверяет проведенность документов.
//
// Параметры:
//  Документы - Массив - документы, проведенность которых необходимо проверить.
//
// Возвращаемое значение:
//  Массив - непроведенные документы из массива Документы.
//
&НаСервере
Функция ПроверитьПроведенностьДокументов(Знач Документы) Экспорт
	
	Результат = Новый Массив;
	
	ШаблонЗапроса = 	
		"ВЫБРАТЬ
		|	ПсевдонимЗаданнойТаблицы.Ссылка КАК Ссылка
		|ИЗ
		|	&ИмяДокумента КАК ПсевдонимЗаданнойТаблицы
		|ГДЕ
		|	ПсевдонимЗаданнойТаблицы.Ссылка В(&МассивДокументов)
		|	И НЕ ПсевдонимЗаданнойТаблицы.Проведен";
	
	ТекстОбъединитьВсе =
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
	ИменаДокументов = Новый Массив;
	Для Каждого Документ Из Документы Цикл
		МетаданныеДокумента = Документ.Метаданные();
		Если ИменаДокументов.Найти(МетаданныеДокумента.ПолноеИмя()) = Неопределено
			И Метаданные.Документы.Содержит(МетаданныеДокумента)
			И МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
				ИменаДокументов.Добавить(МетаданныеДокумента.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "";
	Для Каждого ИмяДокумента Из ИменаДокументов Цикл
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + ТекстОбъединитьВсе;
		КонецЕсли;
		ТекстПодзапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяДокумента", ИмяДокумента);
		ТекстЗапроса = ТекстЗапроса + ТекстПодзапроса;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", Документы);
	
	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, содержащую массив ссылок на документы, подлежащие пометке к удалению
// или снятию пометки с удаления, а также признак пометки на удаление документов.
//
// Параметры:
// 		ВыделенныеСтроки - Массив - массив документов динамического списка,
// 		ПутьКСсылке - Строка - имя реквизита ссылки документа.
//
// Возвращаемое значение:
// 		Структура - содержит массив ссылок на документы и признак пометки на удаление документов.
//
&НаКлиенте
Функция СсылкиОбъектовПомеченныхНаУдаление(ВыделенныеСтроки, ПутьКСсылке = "") Экспорт
	
	МассивСсылок = СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	
	Результат = Новый Структура;
	Результат.Вставить("МассивСсылок", МассивСсылок);
	Результат.Вставить("ЕстьСтрокиПомеченныеНаУдаление", Ложь);
	
	ПометкиНаУдаление = ЗначенияРеквизитовОбъектов(МассивСсылок, "ПометкаУдаления");
	
	Для Каждого КлючЗначение Из ПометкиНаУдаление Цикл
		Если КлючЗначение.Значение.ПометкаУдаления Тогда
			Результат.ЕстьСтрокиПомеченныеНаУдаление = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Установить пометку удаления завершение сервер.
// 
// Parameters:
//  МассивСсылок Массив ссылок
//  ПометитьНаУдаление Пометить на удаление
&НаСервере
Процедура УстановитьПометкуУдаленияЗавершениеСервер(МассивСсылок, ПометитьНаУдаление) Экспорт
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		
		// Записать только те объекты, значение пометки удаления которых изменяется
		Если ПометитьНаУдаление
			И Не ДокументОбъект.ПометкаУдаления Тогда
			
			ДокументОбъект.ПометкаУдаления = Истина;
			
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		ИначеЕсли Не ПометитьНаУдаление
			И ДокументОбъект.ПометкаУдаления Тогда
			
			ДокументОбъект.ПометкаУдаления = Ложь;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Получить значение реквизита.
// 
// Parameters:
//  Объект - Arbitrary - Объект
//  Реквизит - String - Реквизит
// 
// Returns:
//  
&НаСервере
Функция ПолучитьЗначениеРеквизита(Объект, Реквизит)Экспорт 
	
	Попытка
		ЗначениеРеквизита = Объект[Реквизит];
		Возврат ЗначениеРеквизита; 
	Исключение
		Сообщить("Hеквизит не найден "+Реквизит);
	КонецПопытки;
	
КонецФункции // ПолучитьЗначениеРеквизита()

// Возвращает значения реквизитов, прочитанные из информационной базы
// для нескольких объектов.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  МассивСсылок - массив ссылок на объекты одного типа.
//				ВАЖНО! значения массива должны быть ссылками на 
//				объекты одного типа!
//  ИменаРеквизитов - Строка, имена реквизитов перечисленные через запятую,
//				в формате требований к свойствам структуры.
//				Например, "Код, Наименование, Родитель".
// 
// Возвращаемое значение:
//  Соответствие - где ключ - ссылка на объект, а Значение - структура, которая 
//		   		содержит список свойств, как список имен в строке.
//				ИменаРеквизитов, со значениям реквизитов, прочитанными из информационной базы.
//
&НаСервере
Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов) Экспорт
	
	ЗначенияРеквизитов = Новый Соответствие;
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат ЗначенияРеквизитов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Ссылка КАК Ссылка, " + ИменаРеквизитов + "
		|ИЗ
		|	" + МассивСсылок[0].Метаданные().ПолноеИмя() + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		ЗначенияРеквизитов[Выборка.Ссылка] = Результат;
	КонецЦикла;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ВыполнитьКоманду("ИзменитьКоманднаяПанель")	
КонецПроцедуры

// Возвращает полное имя основной формы объекта.
//
// Параметры:
//  Ссылка	 - 	ЛюбаяСсылка - ссылка на объект. Например, ДокументСсылка или СправочникСсылка
// 
// Возвращаемое значение:
//  Строка - полное имя основной формы объекта
//
&НаСервере
Функция ПолноеИмяФормыОбъекта(Ссылка) Экспорт
	
	ИмяФормыТ = "";
	ОбъектМетаданных = Ссылка.Метаданные();
	
	ИмяФормыТ = ОбъектМетаданных.Формы.ФормаДокумента.ПолноеИмя();
		
	Возврат ИмяФормыТ;
	
КонецФункции


// Создание нового документа.
// 
// Parameters:
//  Элемент Элемент
&НаКлиенте
Процедура СозданиеНовогоДокумента(Элемент)
	
	Попытка
		ОткрытьФорму("Документ."+Элемент.Имя+".ФормаОбъекта")
	Исключение
		Сообщить("Не удалось открыть форму нового документа по причине "+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Если Элементы.Найти("Список") <> Неопределено Тогда
		ЭлементУсловногоОформления = ЭтаФорма.Список.УсловноеОформление.Элементы.Добавить();
		
		
		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("Ссылка");
		ГруппаОтбора 					=	ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы 			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		Элем = ГруппаОтбора.Элементы;
		ЭлементОтбора1 = Элем.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора1.ЛевоеЗначение 	= 1;
		ЭлементОтбора1.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора1.ПравоеЗначение 	= 1;
		ЭлементОтбора1.Использование 	= Истина;
		
		ЭлементУсловногоОформления.Использование = Истина;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти








